#version 450 core

layout(local_size_x=1,local_size_y=1) in;

layout(binding=0, std430) readonly buffer gridPts{
	vec4 pts[];
};

layout(binding=5, std430) writeonly buffer normalsSSBO{
	vec3 normals[];
};

uint getIndex(vec2 v){
	return uint((v.y * gl_NumWorkGroups.x) + v.x);
}

vec3 getFaceNormal(vec3 v1, vec3 v2, vec3 v3){
	return normalize(cross(v2-v1, v3-v1));
}

void main(){
	vec3 f1, f2, f3, f4 = vec3(0);
	vec3 vRight, vLeft;
	
	bool nright = (gl_WorkGroupID.x<gl_NumWorkGroups.x-1);
	bool nleft = (gl_WorkGroupID.x != 0);
	
	uint current = getIndex(gl_WorkGroupID.xy);
	vec3 v = pts[current].xzy;
	if (nright){ vRight = pts[current+1].xzy; }
	if (nleft){ vLeft = pts[current-1].xzy; }

	if (gl_WorkGroupID.y<gl_NumWorkGroups.y-1){
		vec3 up = pts[current+gl_NumWorkGroups.x].xzy; 
		if (nright){
			f1 = getFaceNormal(v, up, vRight);
		}
		if (nleft){
			f2 = getFaceNormal(v,up,vLeft);
		}
	}
	if (gl_WorkGroupID.y != 0){
		vec3 down = pts[current-gl_NumWorkGroups.x].xzy;
		if (nright){
			f3 = getFaceNormal(v,down,vRight);
		}
		if (nleft){
			f4 = getFaceNormal(v,down,vLeft);
		}
	}
	normals[current] = normalize(f1+f2+f3+f4);
	//normals[current] = vec3(0,1,0);
	//normals[current] = f1;
}
